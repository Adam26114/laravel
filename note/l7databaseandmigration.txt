=> Migration

.env



database > migrations > table


DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=exerciseone
DB_USERNAME=root
DB_PASSWORD=

mysql -u root -p
Show databases; 

database > migrations 

=> tabele to migrate db server
php artisan migrate

=> Create New Table
8create_tablename_table
php artisan make:migration create_students_table
php artisan make:migration create_workers_table --create="workers"

Schema::create('students', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('phonenumber');
            $table->timestamps();
        });;

php artisan migrate

=>Avaliable Column Type

$table->id();
$table->bigIncrements('id');
$table->increments('id');
$table->bigInteger('id');
$table->unsignedInteger('id');
$table->unsignedBigInteger('id');
$table->smallInteger('votes');
$table->binary('photo');
$table->boolean('confirmed');
$table->char('name',30);
$table->string('name',100);
$table->text('description');
$table->tinytext('note');
$table->tinytext('description');
$table->mediumtext('description');
$table->longText('post');
$table->time('bookingtime');
$table->date('created_at');
$table->year('birthyear');
$table->timestamp();
$table->decimal('amount',precision=8,scale=2);
$table->float('measure',precision=8,scale=2);
$table->enum('payment',['visa','mpu','cod','kpay','wave']);
$table->json('multiphones);

17DT           

=>List all file from database > migrations files
php artisan migrate:status

=>Undo migration
php artisan migrate:rollback
php artisan migrate:rollback --step=2
                                (step  = total number from back)
php artisan migrate:rollback --pretend


=>Check Migration Status
php artisan migrate:status

php artisan make:migration create_students_table --create="students"
php artisan make:migration create_workers_table --create="workers"
php artisan make:migration create_staffs_table --create="staffs"
php artisan make:migration create_employees_table --create="employees"
php artisan make:migration create_shoppers_table --create="shoppers"

=>Undo migrate by step (selected table count to local)
php artisan migrate:rollback --step=2


=>Check before rollback table list
php artisan migrate:rollback --pretend


=>Delete all tables
php artisan migrate:reset

=>Add new Columns   
                    add_collumn name_to_table name_table
php artisan make:migration add_city_to_shoppers_table --table=shoppers

$table->string('city'); to add_city_to_shoppers_table
php artisan migrate


=>Sort Column
php artisan migrate:rollback --pretend
php artisan migrate:rollback
$table->string('city')->after('phonenumber'); to_add_city_to_shoppers_table


php artisan make:migration add_city_to_employees_table --table=employees
$table->string('city')->after('phonenumber');


=>Up Vs Down
php artisan make:migration add_city_to_staffs_table --table=staffs
$table->string('city')->after('phonenumber');
=>down
$table->dropColumn('city');

php artisan migrate
php artisan migrate:status
php artisan migrate:rollback --pretend
php artisan migrate:rollback
php artisan migrate:migrate

=>Drop Column
php artisan make:migration remove_id_to_students_table --table=students
=>Up
$table->dropColumn('id');

php artisan migrate
php artisan migrate:status
php artisan migrate:rollback --pretend
php artisan migrate:rollback
php artisan migrate:migrate

php artisan make:migration remove_id_to_workers_table --table=workers
=>Up
$table->dropColumn(['id','phonenumber']);
=>down
$table->id();
$table->string('phonenumber')->after('fullname');


php artisan migrate
php artisan migrate:status
php artisan migrate:rollback --pretend
php artisan migrate:rollback
php artisan migrate:migrate




php artisan make:migration remove_id_to_staffs_table --table=staffs
=>Up

Note:: hasColumn(tabelname,columname)
if(Schema::hasColumn('staffs','id')){
    Schema::table('staffs', function (Blueprint $table) {
        $table->dropColumn('id');
    });
}
=>down
$table->id()->first();


php artisan migrate
php artisan migrate:status
php artisan migrate:rollback --pretend
php artisan migrate:rollback
php artisan migrate:migrate


=>Rename Column renameColumn(from,to)
php artisan make:migration rename_students_column --table=students
=>up
$table->renameColumn('phonenumber','phone');
$table->renameColumn('address','city');
=>down
$table->renameColumn('phone','phonenumber');
$table->renameColumn('city','address');


php artisan migrate
php artisan migrate:status
php artisan migrate:rollback --pretend
php artisan migrate:rollback
php artisan migrate


=>Rename Table rename(from,to)
php artisan make:migration rename_students_column --table=students
=>up
$table->renameColumn('phonenumber','phone');
$table->renameColumn('address','city');
=>down
$table->renameColumn('phone','phonenumber');
$table->renameColumn('city','address');


php artisan migrate
php artisan migrate:statu
php artisan migrate:rollback --pretend
php artisan migrate:rollback
php artisan migrate



=>Rename table rename(from,to)
php artisan make:migration rename_employees_to_customers_table --table=employees
=>up
Schema::rename('employees','customers');
=>down
Schema::rename('customers','employees');


=>Default Value

php artisan make:migration create_books_table --create="books"

Schema::create('books', function (Blueprint $table) {
    $table->increments('id');
    $table->string('title');
    $table->tinyInteger('status')->default('1');
    $table->enum('copyright',['0','1'])->default('0');
    $table->timestamp('created_at')->default(DB::raw('CURRENT_TIMESTAMP')); //timestamp not include s
    $table->timestamp('updateed_at')->default(DB::raw('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP'));
});

php artisan make:migration create_profiles_table --create="profiles";



=>Crating Indexes

$table->string('email')->unique();
=Foreign Key Constraints

php artisan make:migration create_authors_table --create="authors"
php artisan make:migration create_types_table --create="types"
php artisan make:migration create_posts_table --create="posts"

=Foreign Key Constraints

Method 1

$table->unsignedBigInteger('user_id');
$table->foreign('user_id')->references('id')->on('users');

Method 2

$table->foreignID('user_id')->constrained('users');



Schema::create('author', function (Blueprint $table) {
    $table->id();
    $table->string('name');
    $table->timestamps();
});

Schema::create('types', function (Blueprint $table) {
    $table->id();
    $table->string('name');
    $table->timestamps();
});


Schema::create('posts', function (Blueprint $table) {
    $table->id();
    $table->string('title')->unique();
    $table->text('description');

    $table->unsignedBigInteger('user_id');
    $table->foreign('user_id')->references('id')->on('users')->onUpdate('cascade')->onDelete('cascade');

    $table->foreignId('author_id')->constrained('authors')->onUpdate('cascade')->onDelete('cascade');

    $table->year('year');

    $table->unsignedBigInteger('type_id');
    $table->foreign('type_id')->references('id')->on('types')->onUpdate('cascade')->onDelete('cascade');

    $table->timestamps();
});



// => Data Inset From Route
Route::get("/type/insert",function(){
    DB::insert("INSERT INTO types(name) value(?)",["book"]);
    return "Successfully Inserted";
});


Route::get("/type/insert",function(){
    DB::insert("INSERT INTO types(name) value(?)",["pdf"]);
    return "Successfully Inserted";
});


// Route::get("/type/read",function(){
//     $results =  DB::select("SELECT * FROM types");
//     // return var_dump($result);

//     foreach ($results as $type) {
//         echo $type->name . "<br/>";
//     }
// });


Route::get("/type/read",function(){
    $result =  DB::select("SELECT * FROM types WHERE id=?",[1]);
    // return var_dump($result);

    return $result;
});